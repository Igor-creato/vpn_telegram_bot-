# handlers/bot_handlers.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database.db_handler import DatabaseHandler
from datetime import datetime

class BotHandlers:
    def __init__(self):
        self.db = DatabaseHandler()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        telegram_id = user.id
        username = user.username
        first_name = user.first_name
        last_name = user.last_name
        email = user.email if hasattr(user, 'email') else None
        phone_number = user.phone_number if hasattr(user, 'phone_number') else None

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        if first_name and last_name:
            name = f"{first_name} {last_name}"
        elif first_name:
            name = first_name
        else:
            name = username  # –ï—Å–ª–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º username

        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_data = self.db.get_user(telegram_id)
        if user_data:
            self.db.update_user(telegram_id, username, phone_number, email, name)
        else:
            self.db.add_user(username, telegram_id, phone_number, email, name)

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_message = (
            f"üë§ –ü—Ä–∏–≤–µ—Ç {name}\n"
            "üîó –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–µ—Ç —Å–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä–æ–µ, –Ω–µ–±–ª–æ–∫–∏—Ä—É–µ–º–æ–µ –í–ü–ù (VPN) —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.\n"
            "‚ñ∂Ô∏è –ó–∞–±—É–¥—å –æ —Ç–æ—Ä–º–æ–∑–∞—Ö, –Ω–µ –≥—Ä—É–∑—è—â–∏—Ö—Å—è –≤–∏–¥–µ–æ –Ω–∞ Youtube.\n"
            "üåê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ç–∫—Ä—ã—Ç—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç."
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
        keyboard = [
            [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á", callback_data='get_new_key')],
            [InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á", callback_data='renew_key')],
            [InlineKeyboardButton("–ú–æ–∏ –∫–ª—é—á–∏", callback_data='my_keys')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(welcome_message, reply_markup=reply_markup)

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        if query.data == 'get_new_key':
            telegram_id = query.from_user.id
            keys = self.db.get_user_keys(telegram_id)

            if not keys:
                # –ï—Å–ª–∏ –∫–ª—é—á–µ–π –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
                keyboard = [
                    [InlineKeyboardButton("üíµ 1 –º–µ—Å—è—Ü 150 —Ä—É–±.", callback_data='buy_1_month')],
                    [InlineKeyboardButton("üíµ 3 –º–µ—Å—è—Ü–∞ 400 —Ä—É–±.", callback_data='buy_3_months')],
                    [InlineKeyboardButton("üíµ 6 –º–µ—Å—è—Ü–µ–≤ 715 —Ä—É–±.", callback_data='buy_6_months')],
                    [InlineKeyboardButton("üíµ 1 –≥–æ–¥ 1200 —Ä—É–±.", callback_data='buy_1_year')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞:", reply_markup=reply_markup)
            else:
                # –ï—Å–ª–∏ –∫–ª—é—á–∏ –µ—Å—Ç—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π
                keyboard = [
                    [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –∫–ª—é—á", callback_data='get_another_key')],
                    [InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∫–ª—é—á", callback_data='renew_existing_key')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    text="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞, —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π?",
                    reply_markup=reply_markup
                )

        elif query.data == 'get_another_key':
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ü–æ–ª—É—á–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –∫–ª—é—á", –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
            keyboard = [
                [InlineKeyboardButton("üíµ 1 –º–µ—Å—è—Ü 150 —Ä—É–±.", callback_data='buy_1_month')],
                [InlineKeyboardButton("üíµ 3 –º–µ—Å—è—Ü–∞ 400 —Ä—É–±.", callback_data='buy_3_months')],
                [InlineKeyboardButton("üíµ 6 –º–µ—Å—è—Ü–µ–≤ 715 —Ä—É–±.", callback_data='buy_6_months')],
                [InlineKeyboardButton("üíµ 1 –≥–æ–¥ 1200 —Ä—É–±.", callback_data='buy_1_year')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞:", reply_markup=reply_markup)

        elif query.data == 'renew_key' or query.data == 'renew_existing_key':
            telegram_id = query.from_user.id
            keys = self.db.get_user_keys(telegram_id)

            if not keys:
                await query.edit_message_text(text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–∞–º–∏
            message = "–í–∞—à–∏ –∫–ª—é—á–∏:\n\n"
            keyboard = []
            for index, (link_key, expiration_date) in enumerate(keys, start=1):
                time_left = expiration_date - datetime.now()
                days = time_left.days
                hours, remainder = divmod(time_left.seconds, 3600)
                message += (
                    f"{index}. –ö–ª—é—á:\n `{link_key}`\n"
                    f"  –î–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –æ—Å—Ç–∞–ª–æ—Å—å {days} –¥–Ω–µ–π {hours} —á–∞—Å–æ–≤.\n\n"
                )
                keyboard.append([InlineKeyboardButton(f"–ö–ª—é—á ‚Ññ{index}", callback_data=f'renew_key_{index}')])

            message += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:"
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )

        elif query.data.startswith('renew_key_'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
            key_index = int(query.data.split('_')[-1]) - 1  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–ª—é—á–∞
            telegram_id = query.from_user.id
            keys = self.db.get_user_keys(telegram_id)

            if key_index < 0 or key_index >= len(keys):
                await query.edit_message_text(text="–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á.")
                return

            # –í—ã–≤–æ–¥–∏–º –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton("üíµ 1 –º–µ—Å—è—Ü 150 —Ä—É–±.", callback_data=f'extend_1_month_{key_index}')],
                [InlineKeyboardButton("üíµ 3 –º–µ—Å—è—Ü–∞ 400 —Ä—É–±.", callback_data=f'extend_3_months_{key_index}')],
                [InlineKeyboardButton("üíµ 6 –º–µ—Å—è—Ü–µ–≤ 715 —Ä—É–±.", callback_data=f'extend_6_months_{key_index}')],
                [InlineKeyboardButton("üíµ 1 –≥–æ–¥ 1200 —Ä—É–±.", callback_data=f'extend_1_year_{key_index}')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞:",
                reply_markup=reply_markup
            )

        elif query.data.startswith('extend_'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
            parts = query.data.split('_')
            period = parts[1]  # 1_month, 3_months –∏ —Ç.–¥.
            key_index = int(parts[-1])  # –ò–Ω–¥–µ–∫—Å –∫–ª—é—á–∞

            telegram_id = query.from_user.id
            keys = self.db.get_user_keys(telegram_id)

            if key_index < 0 or key_index >= len(keys):
                await query.edit_message_text(text="–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á.")
                return

            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∫–ª—é—á–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            selected_key = keys[key_index]
            await query.edit_message_text(
                text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –Ω–∞ {period}. –ö–ª—é—á: `{selected_key[0]}`",
                parse_mode="Markdown"
            )

        elif query.data == 'my_keys':
            telegram_id = query.from_user.id
            keys = self.db.get_user_keys(telegram_id)

            if not keys:
                await query.edit_message_text(text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π.")
                return

            message = "–í–∞—à–∏ –∫–ª—é—á–∏:\n\n"
            for index, (link_key, expiration_date) in enumerate(keys, start=1):
                time_left = expiration_date - datetime.now()
                days = time_left.days
                hours, remainder = divmod(time_left.seconds, 3600)
                message += (
                    f"{index}. –ö–ª—é—á:\n `{link_key}`\n"
                    f"  –î–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –æ—Å—Ç–∞–ª–æ—Å—å {days} –¥–Ω–µ–π {hours} —á–∞—Å–æ–≤.\n\n"
                )

            await query.edit_message_text(
                text=message,
                parse_mode="Markdown"
            )