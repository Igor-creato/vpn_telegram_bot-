# handlers/bot_handlers.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database.db_handler import DatabaseHandler
from payment.yookassa_handler import create_payment, check_payment_status
from datetime import datetime, timedelta

class BotHandlers:
    def __init__(self):
        self.db = DatabaseHandler()

    async def handle_payment_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE, amount):
        query = update.callback_query
        telegram_id = query.from_user.id
        
        payment_id = self.db.add_payment(telegram_id, amount)
        payment_url, payment_uid = create_payment(amount, payment_id)
        self.db.update_payment(payment_id, payment_uid)
        
        await query.edit_message_text(
            text=f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ No{payment_id}\n"
                 f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{payment_url}"
        )

    async def check_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        telegram_id = query.from_user.id
        last_payment = self.db.get_last_payment(telegram_id)

        if not last_payment:
            await query.edit_message_text(text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.")
            return

        payment_id, amount = last_payment
        status = check_payment_status(payment_id)

        if status == 'succeeded':
            self.db.update_payment_status(payment_id, status)
            await query.edit_message_text(
                text=f"–í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞–∫–∞–∑ No{payment_id} –Ω–∞ —Å—É–º–º—É {amount} —Ä—É–±."
            )
        else:
            await query.edit_message_text(
                text=f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ No{payment_id} –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
            )

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        telegram_id = user.id
        username = user.username
        first_name = user.first_name
        last_name = user.last_name
        email = user.email if hasattr(user, 'email') else None
        phone_number = user.phone_number if hasattr(user, 'phone_number') else None

        if first_name and last_name:
            name = f"{first_name} {last_name}"
        elif first_name:
            name = first_name
        else:
            name = username

        user_data = self.db.get_user(telegram_id)
        if user_data:
            self.db.update_user(telegram_id, username, phone_number, email, name)
        else:
            self.db.add_user(username, telegram_id, phone_number, email, name)

        welcome_message = (
            f"üë§ –ü—Ä–∏–≤–µ—Ç {name}\n"
            "üîó –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–µ—Ç —Å–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä–æ–µ, –Ω–µ–±–ª–æ–∫–∏—Ä—É–µ–º–æ–µ –í–ü–ù (VPN) —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.\n"
            "‚ñ∂Ô∏è –ó–∞–±—É–¥—å –æ —Ç–æ—Ä–º–æ–∑–∞—Ö, –Ω–µ –≥—Ä—É–∑—è—â–∏—Ö—Å—è –≤–∏–¥–µ–æ –Ω–∞ Youtube.\n"
            "üåê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ç–∫—Ä—ã—Ç—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç."
        )

        keyboard = [
            [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á", callback_data='get_new_key')],
            [InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á", callback_data='renew_key')],
            [InlineKeyboardButton("–ú–æ–∏ –∫–ª—é—á–∏", callback_data='my_keys')],
            [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã", callback_data='check_payment')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(welcome_message, reply_markup=reply_markup)

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        if query.data == 'get_new_key' or query.data == 'get_another_key':
            telegram_id = query.from_user.id
            keys = self.db.get_user_keys(telegram_id)

            keyboard = [
                [InlineKeyboardButton("üíµ 1 –º–µ—Å—è—Ü 150 —Ä—É–±.", callback_data='buy_1_month')],
                [InlineKeyboardButton("üíµ 3 –º–µ—Å—è—Ü–∞ 400 —Ä—É–±.", callback_data='buy_3_months')],
                [InlineKeyboardButton("üíµ 6 –º–µ—Å—è—Ü–µ–≤ 715 —Ä—É–±.", callback_data='buy_6_months')],
                [InlineKeyboardButton("üíµ 1 –≥–æ–¥ 1200 —Ä—É–±.", callback_data='buy_1_year')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞:", reply_markup=reply_markup)
        
        elif query.data == 'my_keys':
            telegram_id = query.from_user.id
            keys = self.db.get_user_keys(telegram_id)
            
            if not keys:
                keyboard = [
                    [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_main')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π.", 
                    reply_markup=reply_markup
                )
                return
                
            keys_text = "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏:\n\n"
            for key, expiration_date in keys:
                keys_text += f"üîë –ö–ª—é—á: {key}\nüìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expiration_date.strftime('%d.%m.%Y')}\n\n"
            
            keyboard = [
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text=keys_text, reply_markup=reply_markup)
        
        elif query.data == 'back_to_main':
            keyboard = [
                [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á", callback_data='get_new_key')],
                [InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á", callback_data='renew_key')],
                [InlineKeyboardButton("–ú–æ–∏ –∫–ª—é—á–∏", callback_data='my_keys')],
                [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã", callback_data='check_payment')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
        
        elif query.data in ['buy_1_month', 'buy_3_months', 'buy_6_months', 'buy_1_year']:
            amounts = {
                'buy_1_month': 150,
                'buy_3_months': 400,
                'buy_6_months': 715,
                'buy_1_year': 1200
            }
            await self.handle_payment_button(update, context, amounts[query.data])

    async def check_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        telegram_id = query.from_user.id
        last_payment = self.db.get_last_payment(telegram_id)

        if not last_payment:
            await query.edit_message_text(text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.")
            return

        payment_id, amount = last_payment
        status = check_payment_status(payment_id)

        if status == 'succeeded':
            self.db.update_payment_status(payment_id, status)
            await query.edit_message_text(
                text=f"–í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞–∫–∞–∑ No{payment_id} –Ω–∞ —Å—É–º–º—É {amount} —Ä—É–±."
            )
        else:
            await query.edit_message_text(
                text=f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ No{payment_id} –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
            )
